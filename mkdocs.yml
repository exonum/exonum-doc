site_name: Exonum Documentation
docs_dir: src
theme:
  name: material
  favicon: 'assets/images/favicon.ico'
  logo: 'assets/images/logo.svg" alt="Exonum Logo'
  custom_dir: theme
  palette:
    primary: 'light green'
    accent: 'lime'

extra_css:
  - assets/stylesheets/extra.css
repo_name: 'exonum/exonum'
repo_url: 'https://github.com/exonum/exonum'
edit_uri: 'doc/blob/master/src'

site_url: 'https://exonum.com/doc'
site_author: 'Exonum Team'
site_description: Exonum is a blockchain framework that allows to build secure permissioned blockchain applications.

copyright: © 2018 Exonum Team. Available under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="license">CC BY-NC-SA 4.0</a> license

extra:
  og_image: 'assets/images/logo-docs.png'
  social:
    - type: 'github'
      link: 'https://github.com/exonum'
    - type: 'facebook'
      link: 'https://www.facebook.com/Exonum'
    - type: 'twitter'
      link: 'https://twitter.com/BitFuryGroup'
google_analytics:
  - 'UA-85962154-1'
  - 'auto'
markdown_extensions:
  - codehilite
  - admonition
  - meta
  - pymdownx.superfences
  - pymdownx.details
pages:
  # Short description of Exonum, documentation and how to use it
  - 'Home': 'index.md'
  - 'Get Started':
    # What is Exonum 'as a box', from point of view of external developer
    - 'What is Exonum': 'get-started/what-is-exonum.md'
    # How does Exonum look from the inside: nodes, validators, clients, blocks, consensus, genesis block;
    # links to necessary documentation parts
    - 'Design Overview': 'get-started/design-overview.md'
    # Installation guide
    - 'Install': 'get-started/install.md'
    # Writing one's first Exonum service
    - 'Create Service': 'get-started/create-service.md'
    # Testing one's first Exonum service
    - 'Test Service': 'get-started/test-service.md'
    - 'Java Binding User Guide': 'get-started/java-binding.md'
  - 'Architecture':
    # Includes guidelines for services
    - 'Services': 'architecture/services.md'
    # What is transaction? (purity, sequential consistency, non-replayability, signatures)
    - 'Transactions': 'architecture/transactions.md'
    # How to make Public API communication (both server and client side)
    - 'Clients': 'architecture/clients.md'
    # Local configuration - how to roughly configure a node (make it ready to run)
    - 'Configuration': 'architecture/configuration.md'
    # Includes blockchain, genesis block, indexes, proofs, etc.
    - 'Storage': 'architecture/storage.md'
    # How the data is serialised and deserialised to be transfered through the network
    - 'Serialization': 'architecture/serialization.md'
    # Consensus overview
    - 'Consensus': 'architecture/consensus.md'
  - 'Advanced':
    # How the network module works: peer discovery, p2p connections
    - 'Network': 'advanced/network.md'
    # Managing node through managing API ("RPC")
    - 'Node Management': 'advanced/node-management.md'
    # What is sandbox testing and simple example of one of sandbox tests
    - 'Service Testing': 'advanced/service-testing.md'
    # Configuration change service documentation
    - 'Configuration Updater': 'advanced/configuration-updater.md'
    # Anchoring service documentation
    - 'Bitcoin Anchoring': 'advanced/bitcoin-anchoring.md'
    # Time service
    - 'Time Oracle': 'advanced/time.md'
    # Merkle index overview
    - 'Merkelized List': 'advanced/merkelized-list.md'
    - 'Consensus':
      # Consensus specification
      - 'Consensus Specification': 'advanced/consensus/specification.md'
      # Requests specification
      - 'Requests': 'advanced/consensus/requests.md'
  # Includes roadmap and features list
  - 'Roadmap': 'roadmap.md'
  # How to contribute to Exonum repositories
  - 'Contributing': 'contributing.md'
  - 'Glossary': 'glossary.md'
  - 'Español': 'es.md'
  - '日本語': 'jp.md'
